/*
TShock, a server mod for Terraria
Copyright (C) 2011-2019 Pryaxis & TShock Contributors

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using MongoDB.Entities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;
using db = MongoDB.Entities.DB;

namespace TShockAPI.DB
{
	/// <summary>UserAccountManager - Methods for dealing with database user accounts and other related functionality within TShock.</summary>
	public class UserAccountManager
	{


		/// <summary>
		/// Adds the given user account to the database
		/// </summary>
		/// <param name="account">The user account to be added</param>
		public void AddUserAccount(UserAccount account) => Hooks.AccountHooks.OnAccountCreate(account);

		/// <summary>
		/// Removes all user accounts from the database whose usernames match the given user account
		/// </summary>
		/// <param name="account">The user account</param>
		public void RemoveUserAccount(UserAccount account) => account.DeleteAsync();

		/// <summary>
		/// Sets the Hashed Password for a given username
		/// </summary>
		/// <param name="account">The user account</param>
		/// <param name="password">The user account password to be set</param>
		public void SetUserAccountPassword(UserAccount account, string password)
		{
			account.CreateBCryptHash(password);
			account.SaveAsync();
		}

		/// <summary>
		/// Sets the UUID for a given username
		/// </summary>
		/// <param name="account">The user account</param>
		/// <param name="uuid">The user account uuid to be set</param>
		public void SetUserAccountUUID(UserAccount account, string uuid)
		{
			account.UUID = uuid;
			account.SaveAsync();
		}

		/// <summary>
		/// Sets the group for a given username
		/// </summary>
		/// <param name="account">The user account</param>
		/// <param name="group">The user account group to be set</param>
		public void SetUserGroup(UserAccount account, string group)
		{
			Group grp = TShock.Groups.GetGroupByName(group);
			account.Group = group;
			
			// Update player group reference for any logged in player
			foreach (var player in TShock.Players.Where(p => p != null && p.Account != null && p.Account.Name == account.Name))
			{
				player.Group = grp;
			}
			
		}

		/// <summary>Updates the last accessed time for a database user account to the current time.</summary>
		/// <param name="account">The user account object to modify.</param>
		public void UpdateLogin(UserAccount account) => account.LastAccessed = DateTime.UtcNow;

		/// <summary>Gets the database ID of a given user account object from the database.</summary>
		/// <param name="username">The username of the user account to query for.</param>
		/// <returns>The user account ID</returns>
		public int GetUserAccountID(string username) => db.Find<UserAccount>().ManyAsync(x => x.Name == username).Result.FirstOrDefault().ID;

		/// <summary>Gets a user account object by name.</summary>
		/// <param name="name">The user's name.</param>
		/// <returns>The user account object returned from the search.</returns>
		public UserAccount GetUserAccountByName(string name) => db.Find<UserAccount>().ManyAsync(x => x.Name == name).Result.FirstOrDefault();

		/// <summary>Gets a user account object by their user account ID.</summary>
		/// <param name="id">The user's ID.</param>
		/// <returns>The user account object returned from the search.</returns>
		public UserAccount GetUserAccountByID(int id) => db.Find<UserAccount>().ManyAsync(x => x.ID == id).Result.FirstOrDefault();

		/// <summary>Gets all the user accounts from the database.</summary>
		/// <returns>The user accounts from the database.</returns>
		public List<UserAccount> GetUserAccounts() => db.Find<UserAccount>().ManyAsync(x => true).Result;
		internal UserAccount GetUserAccount(UserAccount account) => throw new NotImplementedException();
	}


	/// <summary>UserAccountManagerException - An exception generated by the user account manager.</summary>
	[Serializable]
	public class UserAccountManagerException : Exception
	{
		/// <summary>Creates a new UserAccountManagerException object.</summary>
		/// <param name="message">The message for the object.</param>
		/// <returns>A new UserAccountManagerException object.</returns>
		public UserAccountManagerException(string message)
			: base(message)
		{
		}

		/// <summary>Creates a new UserAccountManager Object with an internal exception.</summary>
		/// <param name="message">The message for the object.</param>
		/// <param name="inner">The inner exception for the object.</param>
		/// <returns>A new UserAccountManagerException with a defined inner exception.</returns>
		public UserAccountManagerException(string message, Exception inner)
			: base(message, inner)
		{
		}
	}

	/// <summary>A UserExistsException object, used when a user account already exists when attempting to create a new one.</summary>
	[Serializable]
	public class UserAccountExistsException : UserAccountManagerException
	{
		/// <summary>Creates a new UserAccountExistsException object.</summary>
		/// <param name="name">The name of the user account that already exists.</param>
		/// <returns>A UserAccountExistsException object with the user's name passed in the message.</returns>
		public UserAccountExistsException(string name)
			: base(GetString($"User account {name} already exists"))
		{
		}
	}

	/// <summary>A UserNotExistException, used when a user does not exist and a query failed as a result of it.</summary>
	[Serializable]
	public class UserAccountNotExistException : UserAccountManagerException
	{
		/// <summary>Creates a new UserAccountNotExistException object, with the user account name in the message.</summary>
		/// <param name="name">The user account name to be pasesd in the message.</param>
		/// <returns>A new UserAccountNotExistException object with a message containing the user account name that does not exist.</returns>
		public UserAccountNotExistException(string name)
			: base(GetString($"User account {name} does not exist"))
		{
		}
	}

	/// <summary>A GroupNotExistsException, used when a group does not exist.</summary>
	[Serializable]
	public class GroupNotExistsException : UserAccountManagerException
	{
		/// <summary>Creates a new GroupNotExistsException object with the group's name in the message.</summary>
		/// <param name="group">The group name.</param>
		/// <returns>A new GroupNotExistsException with the group that does not exist's name in the message.</returns>
		public GroupNotExistsException(string group)
			: base(GetString($"Group {group} does not exist"))
		{
		}
	}
}
